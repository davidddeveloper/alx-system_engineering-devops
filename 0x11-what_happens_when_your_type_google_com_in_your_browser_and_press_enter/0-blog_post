In short, your browser acting as a client sends a http request to the web server, the web server respond with an http response which may include the html for google.com. Your browser now renders the webpage to you.
This process is however not as simple as you might think. Let’s delve into the details without any abstraction.
Domain names and IP addresses.
First when you type google.com in your browser and press enter, you are actually typing a domain name. A domain name is some way of saying instead of having to type this IP address 142.250.200.142, just type google.com. Devices (computers, smartphones, servers, routers, switches etc.) on the internet (network of networks) communicate using Ip addresses, an Ip uniquely identify each device on the internet - much like how you would need your moms phone number to call her phone. A domain name map to some servers / load balancers Ip address. Thankfully something else on the other end do this mapping, which we are going to talk about in a moment. So, when you type google.com and press enter you’re actually making a request to some other computer connected to the internet that's running some software that serves the webpage of google.com, since computers communicate on the internet using Ip addresses, your browser when making the request have to replace google.com with the Ip address associated with google.com.
How does your browser find the IP address associated with google.com in order to make the request to the right computer?
Hosts file, DNS server and TCP/IP
Well, it first looks in a file called hosts on your computer. It checks for the IP associated with google.com, if it finds an entry for google.com it makes the request to that computer’s IP. If it doesn’t find the IP associated with google.com in the hosts file, it goes to your DNS. A DNS is a big server on the internet that does exactly what the hosts file does, it maps almost all the domain names on the internet with their respective IPs. This is crucial since more and more websites are added to the internet today, we don’t need to update the hosts file. Before DNS you’ll have to literally keep the hosts file up to date with all new websites IPs.
Before your browser actually makes a request to google.com and starts communicating with each other, It needs to establish a TCP/IP connection to the computer behind google.com (which is the web server). TCP/IP is a protocol (rule or guidelines) that defines how google.com server and your browser should communicate. In TCP/IP the information is sent not as a whole but in small pieces called packets. TCP ensures reliability such that not a single packet is missing. Think of it as the means of transportation to get people and goods (packets) from one place to another.
HTTP, HTTPS, SSL and Firewalls
Once the browser and the clients agree on how to communicate, they also need to agree on what form the data should be, how the data is to be formatted. And that is where http comes to play. Hyper Text (text that links to other text) Transfer Protocol is the language that web browsers and web servers use to communicate with each other. Secure socket layer is another protocol that ensure that data sent between the web server and the client is encrypted, it uses a private and public key cryptography. HTTPS, which is a secure version of HTTP, uses SSL (secure socket layer) to encrypts the data transferred between the server and the client. SSL uses a private and public key system to perform an SSL handshake. This is how the SSL handshake works; an SSL certificate is issued to the browser when you type [google.com](http://google.com) and hit enter, your browser then verifies the certificate to ensure it validity. This validity check ensures that you’re actually communicating with google.com web server and not some imposter trying to intercept. If the certificate is a valid one an SSL connection is established, which is why you often time see an indicator in the form of a padlock icon in the top left part of your browser. In the SSL certificate is a very important information, the public key. Your browser uses the public key to establish this secure connection by exchanging shared secrets. What this mean is, your browser and your server will now have a session key that was generated by the browser, encrypted using the public key and sent to the server. The server decrypts the session key using it private key, which is kept in a secure location in the server. Onwards, the session key will be used to encrypt the data between the browser (client) and server into some form that is not plain text and not readable by humans. So, the session key is used to encrypt and decrypt the actual data. This is thus a high-level overview of the SSL handshake.
Since I mention security above, it would be best to explain a brief about firewalls. Using a firewall, is some way of saying, hey there big guy (a bouncer), I don’t want any uninvited guest to come to my party. A firewall restricts unauthorized access to your private network from an outsider such as the internet, based on some predefined rules, like, never should I see any pornography content.

To summarize the above, when you typed google.com and hit enter, what is essentially going on is this, your browser finds the IP for google.com either in a file called hosts or from a DNS server, then it sends an HTTP Request to that IP, which may be google.com web server. Since you may not want subsequent communication to be seen by others if they intercept your connection, your browser tries to establish a secure connection using HTTPS. Also, if you configure a software firewall, then all incoming and outgoing traffic will pass through it. The server then handles the request, accordingly, sending an HTTP Response back. 
Servers, web servers, and load balancers
Now let’s talk about how your server might handle incoming request.
Imagine this scenario:
There is only one well in your community where everybody gets water from. You wake up one morning, head to the well and there are five people already at the well, so you have to wait for you turn. Now imagine your community is really crowded, so there are not five, ten or twenty but 50 or 100 people already at the well. Thus, you have to wait longer for you turn. Think about all the chaos, congestion and fight to get water, you may not even keep track of your turn, and probably not even gets the water you came for. This is actually, way more the kind of traffic google.com gets every day, it’s in billions. So how is google.com handling all this requests that’s coming in.

First let’s see how we might fix the problems arising from the single well in the scenario above. I bet you the following is how google.com handles incoming request.
Intuitively, we need more wells, so we dug 20 more wells. Less congestion and fewer wait time. Since there are more wells, you go to the line that has a smaller number of people waiting to get water.
This is exactly what google.com does. They have, not one server but multiple servers (wells), in fact google.com have millions of servers located in structures called data centers.
You may think having more wells or servers per se, solves the congestion, wait time and chaos entirely. It does well to solve the problems from a single well, but it doesn’t solve it entirely. Think about this, everybody decides on which line to stand, which is not what we might want. Therefore, the following statement will be true in this case; just because there are fewer people in a line doesn’t necessarily mean you don’t have to wait long and no congestion; the pumps might be running slow, someone might have many tanks to fill up and also you may be interested to just walk to a single well and not to all the wells just to find the suitable line to stand in.
To solve this, we might want to have one or two people that governs the entire wells and everybody that comes to fetch water will pass through them. They may know the wells that runs slowly and those that runs faster, they may also know in real time how many wells are there and the number of people waiting in line. Hence, having someone to control and direct everyone, will in turn means order and suitable well for you.
In the same manner, google.com have a load balancer (or load balancers to avoid SPOF (single point of failure)). The load balancer - a server that runs a load balancing software, receives the requests to google.com and decides based on some algorithm which server should handles the request. As an example, one algorithm google.com might use is the Weighted Scheduling Algorithm, were a predefined weight (number of requests to handle at a given time) is assigned to each server and request are sent to them based on that weight. If a server reaches it predefined weight, requests are no longer sent to it, instead they are sent to other servers. So, a load balancer distributes the traffic it receives across different multiple servers.
Web servers, application servers, databases and firewall
Now let’s talk about some important concept that may or may not go beyond the scope of what happens when you type google.com in your browser and press Enter.
Assuming the web page of google.com have videos, images and even real time weather forecast. Where does all this information come from? Databases. A database is an organized collection of structured information or data, stored in a computer system. Why do we need to have a centralized point where all the data is stored, you might wonder? Well, it would just be very impractical for all the billions of servers google.com have, to store the same information - redundancy. However, don’t get me wrong, services like google.com may or must implement redundancy in their databases (not necessarily in servers). This is achieved by having multiple data centers that ensures data availability at all times.
So, google.com web server will serve static contents, like the HTML for google.com, while their application server will connect with a database via DBMS (Database Management System), query it, do some logic and serves the result (like showing you the weather condition, or playing your video).
To protect their internal network (servers and databases and other devices) from unauthorized access or denial-of-service attacks, google.com may setup firewalls. These firewalls, acts as a barrier between the internal trusted network of google.com and the internet, by inspecting all incoming traffics to block malicious ones.

In summary, you now know a lot is actually going on when you type google.com in your browser and press Enter. Different components and infrastructure ranging from your browser, DNS server, internet protocols and firewalls to web servers, application servers, load balancers, servers and databases, are all working together to bring you google.com.
